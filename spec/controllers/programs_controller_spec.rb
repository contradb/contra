require 'rails_helper'
require 'fake_user_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProgramsController, type: :controller do
  let (:dances) { [FactoryGirl.create(:dance, publish: :all),
                   FactoryGirl.create(:box_the_gnat_contra, publish: :link),
                   FactoryGirl.create(:call_me, publish: :off)] }
  let (:program) { FactoryGirl.create(:program, dances: dances) }

  describe "GET #index" do
    it "assigns all programs as @programs" do
      program
      get :index, params: {}
      expect(assigns(:programs)).to eq([program])
    end
  end

  describe "GET #show" do
    it "assigns the requested program as @program" do
      program
      get :show, params: {:id => program.to_param}
      expect(assigns(:program)).to eq(program)
    end

    describe 'dialect' do
      login_user

      it "assigns @dialect" do
        program
        get :show, params: {:id => program.to_param}
        expect(assigns(:dialect)).to eq(subject.current_user.dialect)
      end
    end
  end

  describe "GET #new" do
    it "assigns @program and @dance_autocomplete_hash_json" do
      program
      sign_in FactoryGirl.create(:user)
      get :new, params: {}
      expect(assigns(:program)).to be_a_new(Program)
      json = JSON.parse(assigns(:dance_autocomplete_hash_json))
      expect(json.map {|d| d['title']}).to eq(dances.select(&:searchable?).map(&:title))
    end
  end

  describe "GET #edit" do
    it "assigns @program and @dance_autocomplete_hash_json" do
      sign_in program.user
      get :edit, params: {:id => program.to_param}
      expect(assigns(:program)).to eq(program)
      json = JSON.parse(assigns(:dance_autocomplete_hash_json))
      expect(json.map {|d| d['title']}).to eq(dances.select(&:searchable?).map(&:title))
    end

    it "If not logged in as program owner, refuses to show page" do
      sign_in FactoryGirl.create(:user)
      request.env["HTTP_REFERER"] = "where_i_came_from"
      get :edit, params: {:id => program.to_param}
      expect(response).to redirect_to "where_i_came_from"
    end
  end

  describe "POST #create" do
    before(:each) {sign_in FactoryGirl.create(:user)}
    context "with valid params" do
      it "creates a new Program" do
        expect {
          post :create, params: {:program => FactoryGirl.attributes_for(:program)}
        }.to change(Program, :count).by(1)
      end

      it "assigns a newly created program as @program" do
        post :create, params: {:program => FactoryGirl.attributes_for(:program)}
        expect(assigns(:program)).to be_a(Program)
        expect(assigns(:program)).to be_persisted
      end

      it "redirects to the created program" do
        post :create, params: {:program => FactoryGirl.attributes_for(:program)}
        expect(response).to redirect_to(Program.last)
      end
    end

    context "with invalid params" do
      let (:invalid_attributes) {FactoryGirl.attributes_for(:program).tap {|h| h.delete(:title)}}
      it "assigns a newly created but unsaved program as @program" do
        post :create, params: {:program => invalid_attributes}
        expect(assigns(:program)).to be_a_new(Program)
      end

      it "re-renders the 'new' template" do
        post :create, params: {:program => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    let(:new_attributes) {{title: "New Title"}}

    it "with wrong login redirects and does not change data" do
      sign_in FactoryGirl.create(:user)
      request.env["HTTP_REFERER"] = "where_i_came_from"
      put :update, params: {:id => program.to_param, :program => new_attributes}
      expect(response).to redirect_to "where_i_came_from"
      program.reload
      new_attributes.each do |k,v|
        expect(program.public_send(k)).to_not eq(v)
      end
    end

    context "with login" do
      before(:each) {sign_in program.user}
      context "with valid params" do
        it "updates the requested program" do
          put :update, params: {:id => program.to_param, :program => new_attributes}
          program.reload
          new_attributes.each do |k,v|
            expect(program.public_send(k)).to eq(v)
          end
        end

        it "assigns the requested program as @program" do
          put :update, params: {:id => program.to_param, :program => FactoryGirl.attributes_for(:program)}
          expect(assigns(:program)).to eq(program)
        end

        it "redirects to the program" do
          put :update, params: {:id => program.to_param, :program => FactoryGirl.attributes_for(:program)}
          expect(response).to redirect_to(program)
        end
      end

      context "with invalid params" do
        let (:invalid_attributes) {FactoryGirl.attributes_for(:program).merge({title: ''})}

        it "assigns the program as @program" do
          put :update, params: {:id => program.to_param, :program => invalid_attributes}
          expect(assigns(:program)).to eq(program)
        end

        it "re-renders the 'edit' template" do
          put :update, params: {:id => program.to_param, :program => invalid_attributes}
          expect(response).to render_template("edit")
        end
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      sign_in program.user;
      request.env["HTTP_REFERER"] = "where_i_came_from"
    end

    it "destroys the requested program" do
      expect {
        delete :destroy, params: {:id => program.to_param}
      }.to change(Program, :count).by(-1)
    end

    it "redirects to the programs list" do
      delete :destroy, params: {:id => program.to_param}
      expect(response).to redirect_to("where_i_came_from")
    end
  end

end
