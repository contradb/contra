# This file was autogenerated by the BETA 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/from-1.5/variables#type-constraints for more info.
variable "aws_access_key" {
  type    = string
  default = "${env("AWS_ACCESS_KEY_ID")}"
}

variable "aws_secret_key" {
  type    = string
  default = "${env("AWS_SECRET_ACCESS_KEY")}"
}

variable "aws_session_token" {
  type    = string
  default = "${env("AWS_SESSION_TOKEN")}"
}

variable "region" {
  type    = string
  default = "${env("AWS_DEFAULT_REGION")}"
}

variable "branch" {
  type    = string
  default = "terraform"
}

variable "database_path" {
  type =  string
  default = null
  description = <<EOF
path to the .sql file to initialize the instance to. By default looks
at the highest file of the form
~/priv/contradb/contradb-2021-12-34.sql" because that's where the
contradb-backup program stores its nightlies.
EOF
}

variable "sql_backup_dir" {
  type = string
  default = "/home/dm/priv/contradb"
}

# "timestamp" template function replacement
locals {
  timestamp = regex_replace(timestamp(), "[- TZ:]", "")

  tmp_database_paths = fileset(var.sql_backup_dir, "contradb-[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]*.sql")
  database_path = null != var.database_path ? var.database_path : "${var.sql_backup_dir}/${element (sort(local.tmp_database_paths), length(local.tmp_database_paths) - 1)}"
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/from-1.5/blocks/source
source "amazon-ebs" "autogenerated_1" {
  access_key    = "${var.aws_access_key}"
  ami_name      = "packer-linux-aws-demo-${local.timestamp}"
  instance_type = "t2.micro"
  region        = "${var.region}"
  secret_key    = "${var.aws_secret_key}"
  source_ami_filter {
    most_recent = true
    filters = {
      name                = "ubuntu/images/*ubuntu-focal-20.04-amd64-server-*"
      root-device-type    = "ebs"
      virtualization-type = "hvm"
    }
    owners = ["099720109477"]
  }
  ssh_username = "ubuntu"
  token        = "${var.aws_session_token}"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/from-1.5/blocks/build
build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "file" {
    destination = "/home/ubuntu/"
    source      = local.database_path
  }
  provisioner "shell" {
    inline = ["git clone 'https://github.com/contradb/contra.git' --branch ${var.branch} /home/ubuntu/contra"]
  }
  provisioner "file" {
    destination = "/home/ubuntu/contra/config/master.key"
    source      = "../config/master.key"
  }
  # provisioner "shell" {
  #   script = "./example.sh"
  # }
}
